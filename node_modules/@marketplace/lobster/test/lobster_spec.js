"use strict";

let nock = require("nock"),
    _ = require("lodash"),
    gulpTap = require("gulp-tap"),
    expect = require("chai").expect,
    lobster = require("../lib/lobster"),
    opts = {
        group: "IBM Marketplace",
        squad: "SACA",
        projectName: "pitcher"
    },
    savedEnvironmentVariables;

describe("The coverage-info plugin", function () {
    beforeEach(function () {
        savedEnvironmentVariables = process.env;
    });

    afterEach(function () {
        process.env = savedEnvironmentVariables;
    });

    it("sends the coverage info", function (done) {
        let coverageEndpoint = nock("http://buoy.mybluemix.net")
                .post("/api/v1/coverage-doc")
                .reply(200, { status: "success" });

        process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH = "./test/fixtures/coverage.html";

        lobster.getIstanbulDefaultPathStream()
        .pipe(lobster.sendIstanbulCoverageInfo(opts))
        .pipe(gulpTap((file) => {
            let contents = String(file.contents);

            expect(contents).to.not.be.null;
            expect(contents).to.contain("{\"status\":\"success\"}");

            done();
            coverageEndpoint.done();
        }));
    });

    it("sends the coverage info with service endpoint", function (done) {
        let coverageEndpoint = nock("http://buoy.mybluemix.net")
                .post("/api/v1/coverage-doc")
                .reply(200, { status: "success" }),
            localOpts = _.clone(opts);

        process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH = "./test/fixtures/coverage.html";

        localOpts.dtatCoverageService = "http://buoy.mybluemix.net/api/v1/coverage-doc";
        lobster.getIstanbulDefaultPathStream()
        .pipe(lobster.sendIstanbulCoverageInfo(localOpts))
        .pipe(gulpTap((file) => {
            let contents = String(file.contents);

            expect(contents).to.not.be.null;
            expect(contents).to.contain("{\"status\":\"success\"}");

            done();
            coverageEndpoint.done();
        }));
    });

    it("sends the coverage info with URL", function (done) {
        let coverageEndpoint = nock("http://buoy.mybluemix.net")
                .post("/api/v1/coverage-doc")
                .reply(200, { status: "success" }),
            localOpts = _.clone(opts);

        process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH = "./test/fixtures/coverage.html";

        localOpts.coveragePageURL = "https://pages.github.ibm.com/";
        lobster.getIstanbulDefaultPathStream()
        .pipe(lobster.sendIstanbulCoverageInfo(localOpts))
        .pipe(gulpTap((file) => {
            let contents = String(file.contents);

            expect(contents).to.not.be.null;
            expect(contents).to.contain("{\"status\":\"success\"}");

            done();
            coverageEndpoint.done();
        }));
    });

    it("sends the alternate coverage info", function (done) {
        let coverageEndpoint = nock("http://buoy.mybluemix.net")
                .post("/api/v1/coverage-doc")
                .reply(200, { status: "success" });

        process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH = "./test/fixtures/coverage-alternate.html";

        lobster.getIstanbulDefaultPathStream()
        .pipe(lobster.sendIstanbulCoverageInfo(opts))
        .pipe(gulpTap((file) => {
            let contents = String(file.contents);

            expect(contents).to.not.be.null;
            expect(contents).to.contain("{\"status\":\"success\"}");

            done();
            coverageEndpoint.done();
        }));
    });

    it("fails coverage send", function (done) {
        let coverageEndpoint = nock("http://buoy.mybluemix.net")
                .post("/api/v1/coverage-doc")
                .reply(415, { status: "bad input" });

        process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH = "./test/fixtures/coverage.html";

        lobster.getIstanbulDefaultPathStream()
        .pipe(lobster.sendIstanbulCoverageInfo(opts))
        .pipe(gulpTap((file) => {
            let contents = String(file.contents);

            expect(contents).to.not.be.null;
            expect(contents).to.contain("{\"status\":\"bad input\"}");

            done();
            coverageEndpoint.done();
        }));
    });

    it("returns the correct default path", function (done) {
        delete process.env.LOBSTER_DEFAULT_COVERAGE_FILE_PATH;
        let istanbulPath = lobster.getIstanbulDefaultPath();

        expect(istanbulPath).to.not.be.null;
        expect(istanbulPath).to.contain("index.html");

        done();
    });
});
