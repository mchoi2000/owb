'use strict';

Object.defineProperty(exports, "__esModule", {
	value: true
});
exports.default = undefined;

var _getOwnPropertyDescriptor = require('babel-runtime/core-js/object/get-own-property-descriptor');

var _getOwnPropertyDescriptor2 = _interopRequireDefault(_getOwnPropertyDescriptor);

var _isInteger = require('babel-runtime/core-js/number/is-integer');

var _isInteger2 = _interopRequireDefault(_isInteger);

var _setImmediate2 = require('babel-runtime/core-js/set-immediate');

var _setImmediate3 = _interopRequireDefault(_setImmediate2);

var _promise = require('babel-runtime/core-js/promise');

var _promise2 = _interopRequireDefault(_promise);

var _slicedToArray2 = require('babel-runtime/helpers/slicedToArray');

var _slicedToArray3 = _interopRequireDefault(_slicedToArray2);

var _regenerator = require('babel-runtime/regenerator');

var _regenerator2 = _interopRequireDefault(_regenerator);

var _asyncToGenerator2 = require('babel-runtime/helpers/asyncToGenerator');

var _asyncToGenerator3 = _interopRequireDefault(_asyncToGenerator2);

var _defineProperty = require('babel-runtime/core-js/object/define-property');

var _defineProperty2 = _interopRequireDefault(_defineProperty);

var _getIterator2 = require('babel-runtime/core-js/get-iterator');

var _getIterator3 = _interopRequireDefault(_getIterator2);

var _typeof2 = require('babel-runtime/helpers/typeof');

var _typeof3 = _interopRequireDefault(_typeof2);

var _getPrototypeOf = require('babel-runtime/core-js/object/get-prototype-of');

var _getPrototypeOf2 = _interopRequireDefault(_getPrototypeOf);

var _classCallCheck2 = require('babel-runtime/helpers/classCallCheck');

var _classCallCheck3 = _interopRequireDefault(_classCallCheck2);

var _createClass2 = require('babel-runtime/helpers/createClass');

var _createClass3 = _interopRequireDefault(_createClass2);

var _possibleConstructorReturn2 = require('babel-runtime/helpers/possibleConstructorReturn');

var _possibleConstructorReturn3 = _interopRequireDefault(_possibleConstructorReturn2);

var _get2 = require('babel-runtime/helpers/get');

var _get3 = _interopRequireDefault(_get2);

var _inherits2 = require('babel-runtime/helpers/inherits');

var _inherits3 = _interopRequireDefault(_inherits2);

var _symbol = require('babel-runtime/core-js/symbol');

var _symbol2 = _interopRequireDefault(_symbol);

var _desc, _value, _class, _desc3, _value3, _class3;

var _lodash = require('lodash');

var _lodash2 = _interopRequireDefault(_lodash);

var _semver = require('semver');

var _semver2 = _interopRequireDefault(_semver);

var _defaults = require('defaults');

var defaults = _interopRequireWildcard(_defaults);

var _levels = require('levels');

var levelUtil = _interopRequireWildcard(_levels);

var _codependency = require('codependency');

var _codependency2 = _interopRequireDefault(_codependency);

var _net = require('net');

var _net2 = _interopRequireDefault(_net);

var _text = require('text');

var _text2 = _interopRequireDefault(_text);

var _tls = require('tls');

var _tls2 = _interopRequireDefault(_tls);

var _url = require('url');

var _url2 = _interopRequireDefault(_url);

var _serialize = require('serialize');

var _stream = require('stream');

var _error = require('error');

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _applyDecoratedDescriptor(target, property, decorators, descriptor, context) {
	var desc = {};
	Object['ke' + 'ys'](descriptor).forEach(function (key) {
		desc[key] = descriptor[key];
	});
	desc.enumerable = !!desc.enumerable;
	desc.configurable = !!desc.configurable;

	if ('value' in desc || desc.initializer) {
		desc.writable = true;
	}

	desc = decorators.slice().reverse().reduce(function (desc, decorator) {
		return decorator(target, property, desc) || desc;
	}, desc);

	if (context && desc.initializer !== void 0) {
		desc.value = desc.initializer ? desc.initializer.call(context) : void 0;
		desc.initializer = undefined;
	}

	if (desc.initializer === void 0) {
		Object['define' + 'Property'](target, property, desc);
		desc = null;
	}

	return desc;
}

var $bufferFull = (0, _symbol2.default)('bufferFull property');
var $cannotConnect = (0, _symbol2.default)('cannotConnect property');
var $connection = (0, _symbol2.default)('connection property');
var $console = (0, _symbol2.default)('console property');
var $failedAttempts = (0, _symbol2.default)('failedAttempts property');
var $flatten = (0, _symbol2.default)('flatten property');
var $flattenArrays = (0, _symbol2.default)('flattenArrays property');
var $getConnection = (0, _symbol2.default)('getConnection method');
var $host = (0, _symbol2.default)('host property');
var $levels = (0, _symbol2.default)('levels property');
var $Logger = (0, _symbol2.default)('Logger property (winston / bunyan)');
var $maxFailedAttempts = (0, _symbol2.default)('maxFailedAttempts property');
var $minLevel = (0, _symbol2.default)('minLevel property');
var $port = (0, _symbol2.default)('port property');
var $replacer = (0, _symbol2.default)('replacer property');
var $secure = (0, _symbol2.default)('secure property');
var $serialize = (0, _symbol2.default)('serialize method');
var $tempLevel = (0, _symbol2.default)('tempLevel property (winston)');
var $timestamp = (0, _symbol2.default)('timestamp property');
var $token = (0, _symbol2.default)('token property');
var $toLevel = (0, _symbol2.default)('toLevel method');
var $withLevel = (0, _symbol2.default)('withLevel property');
var $withStack = (0, _symbol2.default)('withStack property');

var newline = /\n/g;
var tokenPattern = /[a-f\d]{8}-([a-f\d]{4}-){3}[a-f\d]{12}/;

var finalizeLogString = function finalizeLogString(log, token) {
	return token + ' ' + log.toString().replace(newline, '\u2028') + '\n';
};

var getConsoleMethod = function getConsoleMethod(lvl) {
	return lvl == 3 ? 'warn' : lvl > 3 ? 'error' : 'log';
};

var getSafeProp = function getSafeProp(log, prop) {
	while (prop in log) {
		prop = '_' + prop;
	}return prop;
};

var requirePeer = _codependency2.default.register(module);

var nonConfigurable = function nonConfigurable(target, name, descriptor) {
	descriptor.configurable = false;
	descriptor.enumerable = true;
	return descriptor;
};

var unwritable = function unwritable(target, name, descriptor) {
	descriptor.writable = false;
	return descriptor;
};

var enumerable = function enumerable(target, name, descriptor) {
	descriptor.enumerable = true;
	return descriptor;
};

var Logger = (_class = function (_Writable) {
	(0, _inherits3.default)(Logger, _Writable);

	function Logger(opts) {
		(0, _classCallCheck3.default)(this, Logger);

		var _this = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(Logger).call(this, {
			objectMode: true,
			highWaterMark: opts.bufferSize || defaults.bufferSize
		}));

		if (_lodash2.default.isUndefined(opts)) throw new _error.BadOptionsError(opts, _text2.default.noOptions());

		if (!_lodash2.default.isObject(opts)) throw new _error.BadOptionsError(opts, _text2.default.optionsNotObj(typeof opts === 'undefined' ? 'undefined' : (0, _typeof3.default)(opts)));

		if (_lodash2.default.isUndefined(opts.token)) throw new _error.BadOptionsError(opts, _text2.default.noToken());

		if (!_lodash2.default.isString(opts.token) || !tokenPattern.test(opts.token)) throw new _error.BadOptionsError(opts, _text2.default.invalidToken(opts.token));

		_this[$levels] = levelUtil.normalize(opts);

		var _iteratorNormalCompletion = true;
		var _didIteratorError = false;
		var _iteratorError = undefined;

		try {
			var _loop = function _loop() {
				var lvlName = _step.value;

				if (lvlName in _this) throw new _error.BadOptionsError(opts, _text2.default.levelConflict(lvlName));

				(0, _defineProperty2.default)(_this, lvlName, {
					enumerable: true,
					writable: false,
					value: function value() {
						this.log.apply(this, [lvlName].concat(Array.prototype.slice.call(arguments)));
					}
				});
			};

			for (var _iterator = (0, _getIterator3.default)(_this.levels), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {
				_loop();
			}
		} catch (err) {
			_didIteratorError = true;
			_iteratorError = err;
		} finally {
			try {
				if (!_iteratorNormalCompletion && _iterator.return) {
					_iterator.return();
				}
			} finally {
				if (_didIteratorError) {
					throw _iteratorError;
				}
			}
		}

		_this[$token] = opts.token;

		_this.port = opts.port || (opts.secure ? defaults.portSecure : defaults.port);

		_this.flatten = opts.flatten;
		_this.flattenArrays = 'flattenArrays' in opts ? opts.flattenArrays : opts.flatten;

		_this.json = opts.json;
		_this.host = opts.host;
		_this.console = opts.console;
		_this.minLevel = opts.minLevel;
		_this.replacer = opts.replacer;
		_this.timestamp = opts.timestamp;
		_this.withLevel = 'withLevel' in opts ? opts.withLevel : true;
		_this.withStack = opts.withStack;
		_this[$secure] = opts.secure;

		_this[$cannotConnect] = false;
		_this[$failedAttempts] = 0;
		return _this;
	}

	(0, _createClass3.default)(Logger, [{
		key: '_write',
		value: function () {
			var _ref = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee(log, enc, cb) {
				var conn;
				return _regenerator2.default.wrap(function _callee$(_context) {
					while (1) {
						switch (_context.prev = _context.next) {
							case 0:
								log = finalizeLogString(log, this[$token]);

								_context.prev = 1;
								_context.next = 4;
								return this[$getConnection]();

							case 4:
								conn = _context.sent;

								conn.write(log);

								_context.next = 11;
								break;

							case 8:
								_context.prev = 8;
								_context.t0 = _context['catch'](1);

								this.emit('error', _context.t0);

							case 11:
								_context.prev = 11;

								cb();
								return _context.finish(11);

							case 14:
							case 'end':
								return _context.stop();
						}
					}
				}, _callee, this, [[1, 8, 11, 14]]);
			}));

			function _write(_x, _x2, _x3) {
				return _ref.apply(this, arguments);
			}

			return _write;
		}()
	}, {
		key: 'end',
		value: function end() {
			var _this2 = this;

			this.on('connection drain', function () {
				return _this2.closeConnection();
			});
			(0, _get3.default)((0, _getPrototypeOf2.default)(Logger.prototype), 'end', this).apply(this, arguments);
		}
	}, {
		key: 'setDefaultEncoding',
		value: function setDefaultEncoding() {}
	}, {
		key: 'log',
		value: function log(lvl, _log) {
			var _this3 = this;

			if (_log === undefined) {
				_log = lvl;
				lvl = null;
			}

			var lvlName = void 0;

			if (lvl || lvl === 0) {
				var _$toLevel = this[$toLevel](lvl);

				var _$toLevel2 = (0, _slicedToArray3.default)(_$toLevel, 2);

				lvl = _$toLevel2[0];
				lvlName = _$toLevel2[1];

				if (!lvl && lvl !== 0) {
					this.emit('error', new _error.LogentriesError(_text2.default.unknownLevel(lvl)));
					return;
				}

				if (lvl < this.minLevel) return;
			}

			if (_lodash2.default.isArray(_log)) {
				if (_log.length) {
					var _iteratorNormalCompletion2 = true;
					var _didIteratorError2 = false;
					var _iteratorError2 = undefined;

					try {
						for (var _iterator2 = (0, _getIterator3.default)(_log), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {
							var _$log = _step2.value;
							this.log(lvl, _$log);
						}
					} catch (err) {
						_didIteratorError2 = true;
						_iteratorError2 = err;
					} finally {
						try {
							if (!_iteratorNormalCompletion2 && _iterator2.return) {
								_iterator2.return();
							}
						} finally {
							if (_didIteratorError2) {
								throw _iteratorError2;
							}
						}
					}
				} else this.emit('error', new _error.LogentriesError(_text2.default.noLogMessage()));

				return;
			}

			if (_lodash2.default.isObject(_log)) {

				var safeTime = void 0,
				    safeLevel = void 0;

				if (this.timestamp) {
					safeTime = getSafeProp(_log, 'time');
					_log[safeTime] = new Date();
				}

				if (this.withLevel && lvlName) {
					safeLevel = getSafeProp(_log, 'level');
					_log[safeLevel] = lvlName;
				}

				_log = this[$serialize](_log);

				if (!_log) {
					this.emit('error', new _error.LogentriesError(_text2.default.serializedEmpty()));
					return;
				}

				if (this.console) console[getConsoleMethod(lvl)](JSON.parse(_log));

				if (safeTime) delete _log[safeTime];
				if (safeLevel) delete _log[safeLevel];
			} else {
				if (_lodash2.default.isEmpty(_log)) {
					this.emit('error', new _error.LogentriesError(_text2.default.noLogMessage()));
					return;
				}

				_log = [_log.toString()];

				if (this.withLevel && lvlName) _log.unshift(lvlName);

				if (this.timestamp) _log.unshift(new Date().toISOString());

				_log = _log.join(' ');

				if (this.console) console[getConsoleMethod(lvl)](_log);
			}

			if (this[$bufferFull]) {
				this.emit('error', new _error.LogentriesError(_text2.default.bufferFull(_log)));
				return;
			}

			this.emit('log', _log);

			var mayWriteFurther = this.write(_log);

			if (!mayWriteFurther) {
				this[$bufferFull] = true;
				this.once('drain', function () {
					_this3[$bufferFull] = false;
				});
			}
		}
	}, {
		key: 'closeConnection',
		value: function closeConnection() {
			if (!this[$connection]) return;

			this[$connection].then(function (conn) {
				return conn.end();
			});
		}
	}, {
		key: $toLevel,
		value: function value(val) {
			var num = void 0;

			if (levelUtil.isNumberValid(val)) num = parseInt(parseInt(val));else num = this[$levels].indexOf(val);

			var name = this[$levels][num];

			return name ? [num, name] : [];
		}
	}, {
		key: $getConnection,
		value: function () {
			var _ref2 = (0, _asyncToGenerator3.default)(_regenerator2.default.mark(function _callee2(_resolve, _reject) {
				var _this4 = this;

				return _regenerator2.default.wrap(function _callee2$(_context2) {
					while (1) {
						switch (_context2.prev = _context2.next) {
							case 0:
								if (!this[$connection]) {
									_context2.next = 2;
									break;
								}

								return _context2.abrupt('return', this[$connection]);

							case 2:
								if (!this[$failedAttempts]) {
									_context2.next = 5;
									break;
								}

								_context2.next = 5;
								return new _promise2.default(function (resolve) {
									setTimeout(resolve, Math.min(defaults.timeouts.connection.maxRetry, Math.pow(_this4[$failedAttempts], 1.5) * 1000));
								});

							case 5:

								this[$connection] = new _promise2.default(function (resolve, reject) {
									resolve = _resolve || resolve;
									reject = _reject || reject;

									if (_this4[$cannotConnect]) {
										reject(new _error.LogentriesError(_text2.default.cannotConnect()));
										return;
									}

									var opts = {
										host: _this4.host,
										port: _this4.port
									};

									var connection = void 0;
									var resolved = false;

									if (_this4.secure) {
										connection = _tls2.default.connect(opts, function () {
											if (!connection.authorized) {
												_this4[$failedAttempts]++;
												var errMsg = connection.authorizationError;
												_this4.emit(new _error.LogentriesError(_text2.default.authError(errMsg)));
											} else if (_tls2.default && _tls2.default.CleartextStream && connection instanceof _tls2.default.CleartextStream) _this4.emit('connect');
										});
									} else connection = _net2.default.createConnection(opts);

									connection.setTimeout(defaults.timeouts.connection.idle);

									connection.on('drain', function () {
										return (0, _setImmediate3.default)(function () {
											return _this4.emit('connection drain');
										});
									});

									connection.on('timeout', function () {
										connection.end();
										delete _this4[$connection];
									});

									connection.on('error', function () {
										connection.destroy();
										delete _this4[$connection];

										if (!resolved) {
											_this4[$getConnection](resolve, reject);
										}
									});

									connection.on('close', function () {
										delete _this4[$connection];

										_this4.emit('disconnected');
									});

									connection.on('end', function () {
										delete _this4[$connection];
									});

									connection.on('connect', function () {
										_this4[$failedAttempts] = 0;
										resolved = true;
										resolve(connection);

										_this4.emit('connected');
									});
								});

								return _context2.abrupt('return', this[$connection]);

							case 7:
							case 'end':
								return _context2.stop();
						}
					}
				}, _callee2, this);
			}));

			function value(_x4, _x5) {
				return _ref2.apply(this, arguments);
			}

			return value;
		}()
	}, {
		key: 'level',
		value: function level(name) {
			console.warn(_text2.default.deprecatedLevelMethod());
			if (~this[$levels].indexOf(name)) this.minLevel = name;
		}
	}, {
		key: 'winston',
		value: function winston() {
			console.warn(_text2.default.deprecatedWinstonMethod());
		}
	}, {
		key: 'console',
		get: function get() {
			return this[$console];
		},
		set: function set(val) {
			this[$console] = !!val;
		}
	}, {
		key: 'flatten',
		get: function get() {
			return this[$flatten];
		},
		set: function set(val) {
			this[$flatten] = !!val;
			this[$serialize] = (0, _serialize.build)(this);
		}
	}, {
		key: 'flattenArrays',
		get: function get() {
			return this[$flattenArrays];
		},
		set: function set(val) {
			this[$flattenArrays] = !!val;
			this[$serialize] = (0, _serialize.build)(this);
		}
	}, {
		key: 'host',
		get: function get() {
			return this[$host];
		},
		set: function set(val) {
			if (!_lodash2.default.isString(val) || !val.length) {
				this[$host] = defaults.host;
				return;
			}

			val = val.replace(/^https?:\/\//, '');

			var url = _url2.default.parse('http://' + val);

			this[$host] = url.hostname || defaults.host;

			if (url.port) this.port = url.port;
		}
	}, {
		key: 'maxFailedAttempts',
		get: function get() {
			return this[$maxFailedAttempts];
		}
	}, {
		key: 'minLevel',
		get: function get() {
			return this[$minLevel];
		},
		set: function set(val) {
			var _$toLevel3 = this[$toLevel](val);

			var _$toLevel4 = (0, _slicedToArray3.default)(_$toLevel3, 1);

			var num = _$toLevel4[0];


			this[$minLevel] = _lodash2.default.isNumber(num) ? num : 0;
		}
	}, {
		key: 'port',
		get: function get() {
			return this[$port];
		},
		set: function set(val) {
			val = parseFloat(val);
			if ((0, _isInteger2.default)(val) && _lodash2.default.inRange(val, 65536)) this[$port] = val;
		}
	}, {
		key: 'replacer',
		get: function get() {
			return this[$replacer];
		},
		set: function set(val) {
			this[$replacer] = _lodash2.default.isFunction(val) ? val : undefined;
			this[$serialize] = (0, _serialize.build)(this);
		}
	}, {
		key: 'timestamp',
		get: function get() {
			return this[$timestamp];
		},
		set: function set(val) {
			this[$timestamp] = !!val;
		}
	}, {
		key: 'withLevel',
		get: function get() {
			return this[$withLevel];
		},
		set: function set(val) {
			this[$withLevel] = !!val;
		}
	}, {
		key: 'withStack',
		get: function get() {
			return this[$withStack];
		},
		set: function set(val) {
			this[$withStack] = !!val;
			this[$serialize] = (0, _serialize.build)(this);
		}
	}, {
		key: 'levels',
		get: function get() {
			return this[$levels] && this[$levels].slice();
		}
	}, {
		key: 'secure',
		get: function get() {
			return this[$secure];
		}
	}, {
		key: 'serialize',
		get: function get() {
			return this[$serialize];
		}
	}], [{
		key: 'provisionWinston',
		value: function provisionWinston(winston) {
			var _desc2, _value2, _class2;

			if (winston.transports.Logentries) return;

			var Transport = winston.Transport;

			var LogentriesTransport = (_class2 = function (_Transport) {
				(0, _inherits3.default)(LogentriesTransport, _Transport);

				function LogentriesTransport(opts) {
					(0, _classCallCheck3.default)(this, LogentriesTransport);

					var _this5 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(LogentriesTransport).call(this, opts));

					_this5.json = opts.json;

					opts = _lodash2.default.clone(opts || {});

					opts.minLevel = opts.minLevel || opts.level || _this5[$tempLevel] || 0;

					opts.levels = opts.levels || winston.levels;
					if (_semver2.default.satisfies(winston.version, '>=2.0.0')) {
						(function () {
							var levels = opts.levels;
							var values = _lodash2.default.values(levels).reverse();
							opts.levels = {};
							_lodash2.default.keys(levels).forEach(function (k, i) {
								opts.levels[k] = values[i];
							});
						})();
					}

					delete _this5[$tempLevel];

					_this5[$Logger] = new Logger(opts);

					_this5[$Logger].on('error', function (err) {
						return _this5.emit(err);
					});
					return _this5;
				}

				(0, _createClass3.default)(LogentriesTransport, [{
					key: 'log',
					value: function log(lvl, msg, meta, cb) {
						if (this.json) {
							var message = {
								message: msg
							};
							if (!_lodash2.default.isEmpty(meta)) {
								if (_lodash2.default.isObject(meta)) _lodash2.default.defaults(message, meta);else message.meta = meta;
							}

							this[$Logger].log(lvl, message);
						} else {
							if (!_lodash2.default.isEmpty(meta)) {
								if (_lodash2.default.isString(msg)) msg += ' ' + this[$Logger][$serialize](meta);else if (_lodash2.default.isObject(msg)) msg[getSafeProp(msg, 'meta')] = meta;
							}

							this[$Logger].log(lvl, msg);
						}

						(0, _setImmediate3.default)(cb.bind(null, null, true));
					}
				}, {
					key: 'name',
					get: function get() {
						return 'logentries';
					}
				}, {
					key: 'level',
					get: function get() {
						var _$Logger$$toLevel = this[$Logger][$toLevel](this[$Logger].minLevel);

						var _$Logger$$toLevel2 = (0, _slicedToArray3.default)(_$Logger$$toLevel, 2);

						var lvlName = _$Logger$$toLevel2[1];


						return lvlName;
					},
					set: function set(val) {
						if (!this[$Logger]) this[$tempLevel] = val;else this[$Logger].minLevel = val;
					}
				}, {
					key: 'levels',
					get: function get() {
						return this[$Logger].levels.reduce(function (acc, lvlName, lvlNum) {
							acc[lvlName] = lvlNum;
							return acc;
						}, {});
					}
				}]);
				return LogentriesTransport;
			}(Transport), (_applyDecoratedDescriptor(_class2.prototype, 'log', [unwritable, enumerable], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'log'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'name', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'name'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'level', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'level'), _class2.prototype), _applyDecoratedDescriptor(_class2.prototype, 'levels', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class2.prototype, 'levels'), _class2.prototype)), _class2);


			winston.transports.Logentries = LogentriesTransport;
		}
	}, {
		key: 'bunyanStream',
		value: function bunyanStream(opts) {
			var stream = new BunyanStream(opts);

			var _stream$$Logger$$toLe = stream[$Logger][$toLevel](stream[$Logger].minLevel);

			var _stream$$Logger$$toLe2 = (0, _slicedToArray3.default)(_stream$$Logger$$toLe, 2);

			var level = _stream$$Logger$$toLe2[1];

			var type = 'raw';
			var name = 'logentries';

			stream[$Logger].minLevel = 0;

			return {
				level: level,
				name: name,
				stream: stream,
				type: type
			};
		}
	}]);
	return Logger;
}(_stream.Writable), (_applyDecoratedDescriptor(_class.prototype, '_write', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, '_write'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'end', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'end'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'setDefaultEncoding', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'setDefaultEncoding'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'log', [unwritable, enumerable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'log'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'closeConnection', [unwritable, enumerable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'closeConnection'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'console', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'console'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'flatten', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'flatten'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'flattenArrays', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'flattenArrays'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'host', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'host'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'maxFailedAttempts', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'maxFailedAttempts'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'minLevel', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'minLevel'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'port', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'port'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'replacer', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'replacer'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'timestamp', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'timestamp'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'withLevel', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'withLevel'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'withStack', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'withStack'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'levels', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'levels'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'secure', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'secure'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'serialize', [nonConfigurable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'serialize'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'level', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'level'), _class.prototype), _applyDecoratedDescriptor(_class.prototype, 'winston', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class.prototype, 'winston'), _class.prototype), _applyDecoratedDescriptor(_class, 'provisionWinston', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class, 'provisionWinston'), _class)), _class);
exports.default = Logger;


var winston = requirePeer('winston', {
	optional: true
});

if (winston) Logger.provisionWinston(winston);

var winston1 = requirePeer('winston1', {
	optional: true
});
var winston2 = requirePeer('winston2x', {
	optional: true
});

if (winston1) Logger.provisionWinston(winston1);
if (winston2) Logger.provisionWinston(winston2);

var BunyanStream = (_class3 = function (_Writable2) {
	(0, _inherits3.default)(BunyanStream, _Writable2);

	function BunyanStream(opts) {
		(0, _classCallCheck3.default)(this, BunyanStream);

		var _this6 = (0, _possibleConstructorReturn3.default)(this, (0, _getPrototypeOf2.default)(BunyanStream).call(this, {
			objectMode: true,
			highWaterMark: opts.bufferSize || defaults.bufferSize
		}));

		opts = _lodash2.default.clone(opts || {});

		opts.timestamp = false;
		opts.levels = opts.levels || defaults.bunyanLevels;

		_this6[$Logger] = new Logger(opts);

		_this6[$Logger].on('error', function (err) {
			return _this6.emit(err);
		});
		return _this6;
	}

	(0, _createClass3.default)(BunyanStream, [{
		key: '_write',
		value: function _write(log, enc, cb) {
			var lvl = log.level / 10 - 1;

			this[$Logger].log(lvl, log);

			(0, _setImmediate3.default)(cb);
		}
	}]);
	return BunyanStream;
}(_stream.Writable), (_applyDecoratedDescriptor(_class3.prototype, '_write', [unwritable], (0, _getOwnPropertyDescriptor2.default)(_class3.prototype, '_write'), _class3.prototype)), _class3);
module.exports = exports['default'];
//# sourceMappingURL=logger.js.map
