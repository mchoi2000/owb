{"version":3,"file":"logger.js","sources":["../src/node_modules/logger.js"],"sourcesContent":["// IMPORTS /////////////////////////////////////////////////////////////////////\n\nimport _ from 'lodash';\nimport semver from 'semver';\nimport * as defaults from 'defaults';\nimport * as levelUtil from 'levels';\nimport codependency from 'codependency';\nimport net from 'net';\nimport text from 'text';\nimport tls from 'tls';\nimport urlUtil from 'url';\nimport {\n\tbuild\n} from 'serialize';\nimport {\n\tWritable\n} from 'stream';\nimport {\n\tBadOptionsError,\n\tLogentriesError\n} from 'error';\n\n// SYMBOLS /////////////////////////////////////////////////////////////////////\n\nconst $bufferFull = Symbol('bufferFull property');\nconst $cannotConnect = Symbol('cannotConnect property');\nconst $connection = Symbol('connection property');\nconst $console = Symbol('console property');\nconst $failedAttempts = Symbol('failedAttempts property');\nconst $flatten = Symbol('flatten property');\nconst $flattenArrays = Symbol('flattenArrays property');\nconst $getConnection = Symbol('getConnection method');\nconst $host = Symbol('host property');\nconst $levels = Symbol('levels property');\nconst $Logger = Symbol('Logger property (winston / bunyan)');\nconst $maxFailedAttempts = Symbol('maxFailedAttempts property');\nconst $minLevel = Symbol('minLevel property');\nconst $port = Symbol('port property');\nconst $replacer = Symbol('replacer property');\nconst $secure = Symbol('secure property');\nconst $serialize = Symbol('serialize method');\nconst $tempLevel = Symbol('tempLevel property (winston)');\nconst $timestamp = Symbol('timestamp property');\nconst $token = Symbol('token property');\nconst $toLevel = Symbol('toLevel method');\nconst $withLevel = Symbol('withLevel property');\nconst $withStack = Symbol('withStack property');\n\n// PATTERNS ////////////////////////////////////////////////////////////////////\n\nconst newline = /\\n/g;\nconst tokenPattern = /[a-f\\d]{8}-([a-f\\d]{4}-){3}[a-f\\d]{12}/;\n\n// UTIL ////////////////////////////////////////////////////////////////////////\n\nconst finalizeLogString = (log, token) =>\n\t`${ token } ${ log.toString().replace(newline, '\\u2028') }\\n`;\n\nconst getConsoleMethod = lvl => {\n\treturn lvl == 3 ? 'warn' : lvl > 3 ? 'error' : 'log';\n};\n\nconst getSafeProp = (log, prop) => {\n\twhile (prop in log) prop = '_' + prop;\n\treturn prop;\n};\n\nconst requirePeer = codependency.register(module);\n\n// DECORATORS //////////////////////////////////////////////////////////////////\n\nconst nonConfigurable = (target, name, descriptor) => {\n\tdescriptor.configurable = false;\n\tdescriptor.enumerable = true;\n\treturn descriptor;\n};\n\nconst unwritable = (target, name, descriptor) => {\n\tdescriptor.writable = false;\n\treturn descriptor;\n};\n\nconst enumerable = (target, name, descriptor) => {\n\tdescriptor.enumerable = true;\n\treturn descriptor;\n};\n\n// LOGGER //////////////////////////////////////////////////////////////////////\n\nexport default class Logger extends Writable {\n\tconstructor(opts) {\n\t\tsuper({\n\t\t\tobjectMode: true,\n\t\t\thighWaterMark: opts.bufferSize || defaults.bufferSize\n\t\t});\n\n\t\t// Sanity checks\n\n\t\tif (_.isUndefined(opts))\n\t\t\tthrow new BadOptionsError(opts, text.noOptions());\n\n\t\tif (!_.isObject(opts))\n\t\t\tthrow new BadOptionsError(opts, text.optionsNotObj(typeof opts));\n\n\t\tif (_.isUndefined(opts.token))\n\t\t\tthrow new BadOptionsError(opts, text.noToken());\n\n\t\tif (!_.isString(opts.token) || !tokenPattern.test(opts.token))\n\t\t\tthrow new BadOptionsError(opts, text.invalidToken(opts.token));\n\n\t\t// Log method aliases\n\n\t\tthis[$levels] = levelUtil.normalize(opts);\n\n\t\tfor (const lvlName of this.levels) {\n\t\t\tif (lvlName in this)\n\t\t\t\tthrow new BadOptionsError(opts, text.levelConflict(lvlName));\n\n\t\t\tObject.defineProperty(this, lvlName, {\n\t\t\t\tenumerable: true,\n\t\t\t\twritable: false,\n\t\t\t\tvalue() {\n\t\t\t\t\tthis.log.apply(this, [lvlName, ...arguments]);\n\t\t\t\t}\n\t\t\t});\n\t\t}\n\n\t\t// Other permanent options\n\n\t\tthis[$token] = opts.token;\n\n\t\t// Editable options\n\n\t\tthis.port =\n\t\t\topts.port || (opts.secure ? defaults.portSecure : defaults.port);\n\n\t\tthis.flatten = opts.flatten;\n\t\tthis.flattenArrays =\n\t\t\t'flattenArrays' in opts ? opts.flattenArrays : opts.flatten;\n\n\t\tthis.json = opts.json;\n\t\tthis.host = opts.host;\n\t\tthis.console = opts.console;\n\t\tthis.minLevel = opts.minLevel;\n\t\tthis.replacer = opts.replacer;\n\t\tthis.timestamp = opts.timestamp;\n\t\tthis.withLevel = 'withLevel' in opts ? opts.withLevel : true;\n\t\tthis.withStack = opts.withStack;\n\t\tthis[$secure] = opts.secure;\n\n\t\t// Other\n\n\t\tthis[$cannotConnect] = false;\n\t\tthis[$failedAttempts] = 0;\n\t}\n\n\t// Stream methods\n\n\t@unwritable\n\tasync _write(log, enc, cb) {\n\t\tlog = finalizeLogString(log, this[$token]);\n\n\t\ttry {\n\t\t\tconst conn = await this[$getConnection]();\n\t\t\tconn.write(log);\n\n\t\t} catch (err) {\n\t\t\tthis.emit('error', err);\n\n\t\t} finally {\n\t\t\tcb();\n\t\t}\n\t}\n\n\t@unwritable\n\tend() {\n\t\tthis.on('connection drain', () => this.closeConnection());\n\t\tsuper.end(...arguments);\n\t}\n\n\t@unwritable\n\tsetDefaultEncoding() { /* no. */ }\n\n\t// Public methods\n\n\t@unwritable\n\t@enumerable\n\tlog(lvl, log) {\n\t\t// lvl is optional\n\t\tif (log === undefined) {\n\t\t\tlog = lvl;\n\t\t\tlvl = null;\n\t\t}\n\n\t\tlet lvlName;\n\n\t\tif (lvl || lvl === 0) {\n\t\t\t[lvl, lvlName] = this[$toLevel](lvl);\n\n\t\t\t// If lvl is present, it must be recognized\n\t\t\tif (!lvl && lvl !== 0) {\n\t\t\t\tthis.emit('error', new LogentriesError(text.unknownLevel(lvl)));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// If lvl is below minLevel, it is dismissed\n\t\t\tif (lvl < this.minLevel)\n\t\t\t\treturn;\n\t\t}\n\n\t\t// If log is an array, it is treated as a collection of log events\n\t\tif (_.isArray(log)) {\n\t\t\tif (log.length)\n\t\t\t\tfor (const $log of log) this.log(lvl, $log);\n\t\t\telse\n\t\t\t\tthis.emit('error', new LogentriesError(text.noLogMessage()));\n\n\t\t\treturn;\n\t\t}\n\n\t\t// If log is an object, it is serialized to string and may be augmented\n\t\t// with timestamp and level. For strings, these may be prepended.\n\n\t\tif (_.isObject(log)) {\n\n\t\t\tlet safeTime, safeLevel;\n\n\t\t\tif (this.timestamp) {\n\t\t\t\tsafeTime = getSafeProp(log, 'time');\n\t\t\t\tlog[safeTime] = new Date();\n\t\t\t}\n\n\t\t\tif (this.withLevel && lvlName) {\n\t\t\t\tsafeLevel = getSafeProp(log, 'level');\n\t\t\t\tlog[safeLevel] = lvlName;\n\t\t\t}\n\n\t\t\tlog = this[$serialize](log);\n\n\t\t\tif (!log) {\n\t\t\t\tthis.emit('error', new LogentriesError(text.serializedEmpty()));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (this.console)\n\t\t\t\tconsole[getConsoleMethod(lvl)](JSON.parse(log));\n\n\t\t\tif (safeTime) delete log[safeTime];\n\t\t\tif (safeLevel) delete log[safeLevel];\n\n\t\t} else {\n\t\t\tif (_.isEmpty(log)) {\n\t\t\t\tthis.emit('error', new LogentriesError(text.noLogMessage()));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tlog = [log.toString()];\n\n\t\t\tif (this.withLevel && lvlName)\n\t\t\t\tlog.unshift(lvlName);\n\n\t\t\tif (this.timestamp)\n\t\t\t\tlog.unshift((new Date()).toISOString());\n\n\t\t\tlog = log.join(' ');\n\n\t\t\tif (this.console)\n\t\t\t\tconsole[getConsoleMethod(lvl)](log);\n\t\t}\n\n\t\tif (this[$bufferFull]) {\n\t\t\tthis.emit('error', new LogentriesError(text.bufferFull(log)));\n\t\t\treturn;\n\t\t}\n\n\t\tthis.emit('log', log);\n\n\t\tconst mayWriteFurther = this.write(log);\n\n\t\tif (!mayWriteFurther) {\n\t\t\tthis[$bufferFull] = true;\n\t\t\tthis.once('drain', () => {\n\t\t\t\tthis[$bufferFull] = false;\n\t\t\t});\n\t\t}\n\t}\n\n\t@unwritable\n\t@enumerable\n\tcloseConnection() {\n\t\tif (!this[$connection]) return;\n\n\t\tthis[$connection].then(conn => conn.end());\n\t}\n\n\t// Private methods\n\n\t[$toLevel](val) {\n\t\tlet num;\n\n\t\tif (levelUtil.isNumberValid(val))\n\t\t\tnum = parseInt(parseInt(val)); // -0\n\t\telse\n\t\t\tnum = this[$levels].indexOf(val);\n\n\t\tconst name = this[$levels][num];\n\n\t\treturn name ? [num, name] : [];\n\t}\n\n\tasync [$getConnection](_resolve, _reject) {\n\t\t// The $connection property is a promise. On error, manual close, or\n\t\t// timeout, it deletes itself.\n\n\t\tif (this[$connection]) return this[$connection];\n\n\t\tif (this[$failedAttempts]) {\n\t\t\tawait new Promise(resolve => {\n\t\t\t\tsetTimeout(resolve, Math.min(defaults.timeouts.connection.maxRetry, (this[$failedAttempts] ** 1.5) * 1000));\n\t\t\t});\n\t\t}\n\n\t\tthis[$connection] = new Promise((resolve, reject) => {\n\t\t\tresolve = _resolve || resolve;\n\t\t\treject = _reject || reject;\n\n\t\t\tif (this[$cannotConnect]) {\n\t\t\t\treject(new LogentriesError(text.cannotConnect()));\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tconst opts = {\n\t\t\t\thost: this.host,\n\t\t\t\tport: this.port\n\t\t\t};\n\n\t\t\tlet connection;\n\t\t\tlet resolved = false;\n\n\t\t\tif (this.secure) {\n\t\t\t\tconnection = tls.connect(opts, () => {\n\t\t\t\t\tif (!connection.authorized) {\n\t\t\t\t\t\tthis[$failedAttempts]++;\n\t\t\t\t\t\tconst errMsg = connection.authorizationError;\n\t\t\t\t\t\tthis.emit(new LogentriesError(text.authError(errMsg)));\n\t\t\t\t\t} else if (tls && tls.CleartextStream &&\n\t\t\t\t\t\tconnection instanceof tls.CleartextStream)\n\t\t\t\t\t// Your node is ancient!\n\t\t\t\t\t\tthis.emit('connect');\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\tconnection = net.createConnection(opts);\n\n\t\t\tconnection.setTimeout(defaults.timeouts.connection.idle);\n\n\t\t\t// Expose the connectionâ€™s drain event\n\t\t\tconnection.on('drain', () =>\n\t\t\t\tsetImmediate(() => this.emit('connection drain'))\n\t\t\t);\n\n\t\t\t// This is an inactivity timeout, not a connection timeout\n\t\t\tconnection.on('timeout', () => {\n\t\t\t\tconnection.end();\n\t\t\t\tdelete this[$connection];\n\t\t\t});\n\n\t\t\t// Error rejects the promise\n\t\t\tconnection.on('error', () => {\n\t\t\t\tconnection.destroy();\n\t\t\t\tdelete this[$connection];\n\n\t\t\t\t// If this error occurred before a connection was established, try again.\n\t\t\t\tif (!resolved) {\n\t\t\t\t\tthis[$getConnection](resolve, reject);\n\t\t\t\t}\n\t\t\t});\n\n\t\t\t// Close will emit whether it was intended or error-caused:\n\t\t\tconnection.on('close', () => {\n\t\t\t\tdelete this[$connection];\n\n\t\t\t\tthis.emit('disconnected');\n\t\t\t});\n\n\t\t\t// This will probably never be triggered since the communication is\n\t\t\t// one-way, but just in case:\n\t\t\tconnection.on('end', () => {\n\t\t\t\tdelete this[$connection];\n\t\t\t});\n\n\t\t\t// Yay\n\t\t\tconnection.on('connect', () => {\n\t\t\t\tthis[$failedAttempts] = 0;\n\t\t\t\tresolved = true;\n\t\t\t\tresolve(connection);\n\n\t\t\t\tthis.emit('connected');\n\t\t\t});\n\t\t});\n\n\t\treturn this[$connection];\n\t}\n\n\t// Coercive settable options\n\n\t@nonConfigurable\n\tget console() {\n\t\treturn this[$console];\n\t}\n\tset console(val) {\n\t\tthis[$console] = !!val;\n\t}\n\n\t@nonConfigurable\n\tget flatten() {\n\t\treturn this[$flatten];\n\t}\n\tset flatten(val) {\n\t\tthis[$flatten] = !!val;\n\t\tthis[$serialize] = build(this);\n\t}\n\n\t@nonConfigurable\n\tget flattenArrays() {\n\t\treturn this[$flattenArrays];\n\t}\n\tset flattenArrays(val) {\n\t\tthis[$flattenArrays] = !!val;\n\t\tthis[$serialize] = build(this);\n\t}\n\n\t@nonConfigurable\n\tget host() {\n\t\treturn this[$host];\n\t}\n\tset host(val) {\n\t\tif (!_.isString(val) || !val.length) {\n\t\t\tthis[$host] = defaults.host;\n\t\t\treturn;\n\t\t}\n\n\t\tval = val.replace(/^https?:\\/\\//, '');\n\n\t\tconst url = urlUtil.parse(`http://${ val }`);\n\n\t\tthis[$host] = url.hostname || defaults.host;\n\n\t\tif (url.port) this.port = url.port;\n\t}\n\n\t@nonConfigurable\n\tget maxFailedAttempts() {\n\t\treturn this[$maxFailedAttempts];\n\t}\n\n\t@nonConfigurable\n\tget minLevel() {\n\t\treturn this[$minLevel];\n\t}\n\tset minLevel(val) {\n\t\tconst [num] = this[$toLevel](val);\n\n\t\tthis[$minLevel] = _.isNumber(num) ? num : 0;\n\t}\n\n\t@nonConfigurable\n\tget port() {\n\t\treturn this[$port];\n\t}\n\tset port(val) {\n\t\tval = parseFloat(val);\n\t\tif (Number.isInteger(val) && _.inRange(val, 65536)) this[$port] = val;\n\t}\n\n\t@nonConfigurable\n\tget replacer() {\n\t\treturn this[$replacer];\n\t}\n\tset replacer(val) {\n\t\tthis[$replacer] = _.isFunction(val) ? val : undefined;\n\t\tthis[$serialize] = build(this);\n\t}\n\n\t@nonConfigurable\n\tget timestamp() {\n\t\treturn this[$timestamp];\n\t}\n\tset timestamp(val) {\n\t\tthis[$timestamp] = !!val;\n\t}\n\n\t@nonConfigurable\n\tget withLevel() {\n\t\treturn this[$withLevel];\n\t}\n\tset withLevel(val) {\n\t\tthis[$withLevel] = !!val;\n\t}\n\n\t@nonConfigurable\n\tget withStack() {\n\t\treturn this[$withStack];\n\t}\n\tset withStack(val) {\n\t\tthis[$withStack] = !!val;\n\t\tthis[$serialize] = build(this);\n\t}\n\n\t// Immutable properties\n\n\t@nonConfigurable\n\tget levels() {\n\t\treturn this[$levels] && this[$levels].slice();\n\t}\n\n\t@nonConfigurable\n\tget secure() {\n\t\treturn this[$secure];\n\t}\n\n\t// Exposed but externally immutable\n\n\t@nonConfigurable\n\tget serialize() {\n\t\treturn this[$serialize];\n\t}\n\n\t// Deprecated (to support migrants from le_node)\n\n\t@unwritable\n\tlevel(name) {\n\t\tconsole.warn(text.deprecatedLevelMethod());\n\t\tif (~this[$levels].indexOf(name)) this.minLevel = name;\n\t}\n\n\t@unwritable\n\twinston() {\n\t\tconsole.warn(text.deprecatedWinstonMethod());\n\t}\n\n\t// Static methods\n\n\t@unwritable\n\tstatic provisionWinston(winston) {\n\n\t\tif (winston.transports.Logentries) return;\n\n\t\tconst Transport = winston.Transport;\n\n\t\tclass LogentriesTransport extends Transport {\n\t\t\tconstructor(opts) {\n\t\t\t\tsuper(opts);\n\t\t\t\tthis.json = opts.json;\n\n\t\t\t\topts = _.clone(opts || {});\n\n\t\t\t\topts.minLevel =\n\t\t\t\t\topts.minLevel || opts.level || this[$tempLevel] || 0;\n\n\t\t\t\topts.levels = opts.levels || winston.levels;\n\t\t\t\tif (semver.satisfies(winston.version, '>=2.0.0')) {\n\t\t\t\t\t// Winston and Logengries levels are reversed\n\t\t\t\t\t// ('error' level is 0 for Winston and 5 for Logentries)\n\t\t\t\t\t// If the user provides custom levels we assue they are\n\t\t\t\t\t// using winston standard\n\t\t\t\t\tconst levels = opts.levels;\n\t\t\t\t\tconst values = _.values(levels).reverse();\n\t\t\t\t\topts.levels = {};\n\t\t\t\t\t_.keys(levels).forEach((k, i) => {\n\t\t\t\t\t\topts.levels[k] = values[i];\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tdelete this[$tempLevel];\n\n\t\t\t\tthis[$Logger] = new Logger(opts);\n\n\t\t\t\tthis[$Logger].on('error', err => this.emit(err));\n\t\t\t}\n\n\t\t\t@unwritable\n\t\t\t@enumerable\n\t\t\tlog(lvl, msg, meta, cb) {\n\t\t\t\tif (this.json) {\n\t\t\t\t\tconst message = {\n\t\t\t\t\t\tmessage: msg\n\t\t\t\t\t};\n\t\t\t\t\tif (!_.isEmpty(meta)) {\n\t\t\t\t\t\tif (_.isObject(meta))\n\t\t\t\t\t\t\t_.defaults(message, meta);\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmessage.meta = meta;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[$Logger].log(lvl, message);\n\t\t\t\t} else {\n\t\t\t\t\tif (!_.isEmpty(meta)) {\n\t\t\t\t\t\tif (_.isString(msg))\n\t\t\t\t\t\t\tmsg += ' ' + this[$Logger][$serialize](meta);\n\n\t\t\t\t\t\telse if (_.isObject(msg))\n\t\t\t\t\t\t\tmsg[getSafeProp(msg, 'meta')] = meta;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis[$Logger].log(lvl, msg);\n\t\t\t\t}\n\n\t\t\t\tsetImmediate(cb.bind(null, null, true));\n\t\t\t}\n\n\t\t\t@nonConfigurable\n\t\t\tget name() {\n\t\t\t\treturn 'logentries';\n\t\t\t}\n\n\t\t\t@nonConfigurable\n\t\t\tget level() {\n\t\t\t\tconst [, lvlName] =\n\t\t\t\tthis[$Logger][$toLevel](this[$Logger].minLevel);\n\n\t\t\t\treturn lvlName;\n\t\t\t}\n\t\t\tset level(val) {\n\t\t\t\tif (!this[$Logger])\n\t\t\t\t\tthis[$tempLevel] = val;\n\t\t\t\telse\n\t\t\t\t\tthis[$Logger].minLevel = val;\n\t\t\t}\n\n\t\t\t@nonConfigurable\n\t\t\tget levels() {\n\t\t\t\treturn this[$Logger].levels.reduce((acc, lvlName, lvlNum) => {\n\t\t\t\t\tacc[lvlName] = lvlNum;\n\t\t\t\t\treturn acc;\n\t\t\t\t}, {});\n\t\t\t}\n\t\t}\n\n\t\twinston.transports.Logentries = LogentriesTransport;\n\t}\n\n\tstatic bunyanStream(opts) {\n\t\tconst stream = new BunyanStream(opts);\n\t\tconst [, level] = stream[$Logger][$toLevel](stream[$Logger].minLevel);\n\t\tconst type = 'raw';\n\t\tconst name = 'logentries';\n\n\t\t// Defer to Bunyanâ€™s handling of minLevel\n\n\t\tstream[$Logger].minLevel = 0;\n\n\t\treturn {\n\t\t\tlevel,\n\t\t\tname,\n\t\t\tstream,\n\t\t\ttype\n\t\t};\n\t}\n}\n\n// PROVISION WINSTON ///////////////////////////////////////////////////////////\n\nconst winston = requirePeer('winston', {\n\toptional: true\n});\n\nif (winston) Logger.provisionWinston(winston);\n\n// Provision too the winston static versions for testing/development purposes\nconst winston1 = requirePeer('winston1', {\n\toptional: true\n});\nconst winston2 = requirePeer('winston2x', {\n\toptional: true\n});\n\nif (winston1) Logger.provisionWinston(winston1);\nif (winston2) Logger.provisionWinston(winston2);\n\n// BUNYAN STREAM ///////////////////////////////////////////////////////////////\n\nclass BunyanStream extends Writable {\n\tconstructor(opts) {\n\t\tsuper({\n\t\t\tobjectMode: true,\n\t\t\thighWaterMark: opts.bufferSize || defaults.bufferSize\n\t\t});\n\n\t\topts = _.clone(opts || {});\n\n\t\topts.timestamp = false;\n\t\topts.levels = opts.levels || defaults.bunyanLevels;\n\n\t\tthis[$Logger] = new Logger(opts);\n\n\t\tthis[$Logger].on('error', err => this.emit(err));\n\t}\n\n\t@unwritable\n\t_write(log, enc, cb) {\n\t\tconst lvl = (log.level / 10) - 1;\n\n\t\tthis[$Logger].log(lvl, log);\n\n\t\tsetImmediate(cb);\n\t}\n}"],"names":[],"mappings":"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"}