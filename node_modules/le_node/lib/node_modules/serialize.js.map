{"version":3,"file":"serialize.js","sources":["../src/node_modules/serialize.js"],"sourcesContent":["\n// IMPORTS /////////////////////////////////////////////////////////////////////\n\nimport _      from 'lodash';\nimport jsonSS from 'json-stringify-safe';\n\n// PATTERNS ////////////////////////////////////////////////////////////////////\n\nconst stackDelim = /\\n\\s*/g;\n\n// UTIL ////////////////////////////////////////////////////////////////////////\n\nconst pass = (key, val) => val;\n\nconst isNewIterable = val => {\n\treturn (\n\t\t(Map && val instanceof Map) ||\n\t\t(Set && val instanceof Set) ||\n\t\t(WeakMap && val instanceof WeakMap) ||\n\t\t(WeakSet && val instanceof WeakSet)\n\t);\n\n\t// Though it might be a nice touch to spread generators too, it’d be way too\n\t// presumptuous (could have side effects, could be infinite). As it is,\n\t// functions and generators both just disappear into the night, though the\n\t// user can change this with a custom replacer.\n};\n\n// BUILD SERIALIZER ////////////////////////////////////////////////////////////\n\nexport const build = ({ flatten, flattenArrays, replacer = pass,\n\twithStack }) => {\n\t// We augment the default JSON.stringify serialization behavior with\n\t// handling for a number of values that otherwise return nonsense values or\n\t// nothing at all. In addition to numeric outliers, a number of other basic\n\t// JS objects (post-ES6 especially) aren’t in the JSON spec, presumably\n\t// because it would have been too obvious that we were tricking everyone\n\t// else into making our lives easier. This augmented behavior is useful in a\n\t// JS environment since we’re not apt to think ‘I am going to log JSON!’; we\n\t// just want to dump objects in the log hole.\n\n\t// If the user supplied a custom replacer, it is applied first.\n\n\tconst replace = _.flow(replacer, val => {\n\t\t// Prototypeless object\n\t\tif (_.isObject(val) && !Object.getPrototypeOf(val))\n\t\t\treturn val;\n\n\t\tif (_.isObject(val) && !(val instanceof Object))\n\t\t\treturn val;\n\n\t\t// Trouble primitives\n\t\tif (_.isNaN(val))              return 'NaN';\n\t\tif (val === Infinity)          return 'Infinity';\n\t\tif (val === -Infinity)         return '-Infinity';\n\t\tif (1 / val === -Infinity)     return '-0';\n\t\tif (typeof val == 'symbol')    return val.toString();\n\n\t\t// Trouble objects\n\t\tif (_.isError(val))            return errReplacer(val, withStack);\n\t\tif (_.isArguments(val))        return _.toArray(val);\n\t\tif (_.isRegExp(val))           return val.toString();\n\t\tif (isNewIterable(val))        return [ ...val ];\n\n\t\t// - Error, regexp, maps and sets would have been `{}`\n\t\t// - Arguments would have been `{\"0\": \"arg1\", \"1\": \"arg2\" }`\n\t\t// - NaN and +/-Infinity would have been `null` (wtf?)\n\t\t// - -0 would have been 0 (yes I’m being overly thorough)\n\t\t// - Symbols would have been undefined\n\n\t\t// Note: numeric literals in base-whatever are just standard decimal\n\t\t// integers internally, so 0b1 will be \"1\" -- the original notation\n\t\t// can’t be preserved. JSON does preserve exponent suffixes though.\n\n\t\treturn val;\n\t});\n\n\t// json-stringify-safe is a JSON.stringify wrapper that takes care of\n\t// circular references.\n\n\tconst serialize = _.partial(jsonSS, _, replace);\n\n\treturn flatten ? flat(serialize, flattenArrays) : serialize;\n};\n\nconst errReplacer = (val, withStack) => {\n\n\t// Errors do not serialize nicely with JSON.stringify because none of the\n\t// properties of interest are ‘own’ properties.\n\n\tconst err = { name: val.name || 'Error', message: val.message };\n\n\t// Though custom errors could have some own properties:\n\n\tfor (const prop in val) err[prop] = val[prop];\n\n\t// For the stack, we convert to an array for the sake of readability.\n\n\tif (withStack) err.stack = val.stack && val.stack.split(stackDelim);\n\n\treturn err;\n};\n\nconst flat = (serialize, arraysToo) => {\n\treturn (obj) => {\n\t\tobj = JSON.parse(serialize(obj));\n\n\t\tif (!_.isObject(obj)) return obj;\n\n\t\tconst flatObj = _.reduce(obj, function _flat(target, val, key) {\n\n\t\t\tconst keyContext = this.slice();\n\n\t\t\tkeyContext.push(key);\n\n\t\t\tkey = keyContext.join('.');\n\n\t\t\tif (!_.isObject(val))\n\t\t\t\ttarget[key] = val;\n\t\t\telse if (!arraysToo && _.isArray(val)) {\n\t\t\t\ttarget[key] = val.map(val => {\n\t\t\t\t\tif (!_.isObject(val)) return val;\n\n\t\t\t\t\treturn _.reduce(val, _flat, {}, []);\n\t\t\t\t});\n\t\t\t} else\n\t\t\t\t_.reduce(val, _flat, target, keyContext);\n\n\t\t\treturn target;\n\t\t}, {}, []);\n\n\t\treturn jsonSS(flatObj);\n\t};\n};\n"],"names":[],"mappings":"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"}